{"version":3,"sources":["webpack:///src/Client/pages/Detail.vue","webpack:///./src/Client/pages/Detail.vue?0f8a","webpack:///./src/Client/pages/Detail.vue","webpack:///./node_modules/marked/lib/marked.js"],"names":["Detail","components","Loading","data","article","title","date","tag","computed","mark","marked_default","this","isLoading","$store","state","created","_this","asyncToGenerator_default","regenerator_default","a","_callee","res","wrap","_context","prev","next","commit","$request","path","$route","params","id","method","sent","content","moment","Number","format","t0","stop","mounted","methods","pages_Detail","render","_vm","_h","$createElement","_c","_self","staticClass","_v","_e","_s","staticStyle","font-size","color","padding-bottom","border-bottom","directives","name","rawName","attrs","domProps","innerHTML","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","global","root","block","newline","code","fences","noop","hr","heading","nptable","blockquote","list","html","def","table","lheading","paragraph","text","Lexer","options","tokens","links","Object","create","marked","defaults","rules","normal","pedantic","gfm","tables","_label","_title","edit","replace","getRegex","bullet","item","source","_tag","_comment","merge","lex","src","prototype","token","top","loose","cap","bull","b","listStart","listItems","t","space","i","l","isordered","istask","ischecked","exec","substring","length","push","type","rtrim","lang","depth","header","splitCells","align","split","cells","test","ordered","start","match","indexOf","RegExp","smartLists","slice","join","charAt","undefined","task","checked","sanitize","pre","sanitizer","toLowerCase","href","Error","charCodeAt","inline","escape","autolink","url","link","reflink","nolink","strong","em","br","del","InlineLexer","renderer","Renderer","breaks","TextRenderer","Parser","encode","unescape","_","n","String","fromCharCode","parseInt","regex","opt","val","resolveUrl","base","baseUrls","_escapes","_scheme","_email","_attribute","_href","_backpedal","output","prevCapZero","out","mangle","inLink","trim","outputLink","escapes","codespan","smartypants","image","ch","Math","random","toString","escaped","highlight","langPrefix","quote","level","raw","headerIds","headerPrefix","xhtml","body","listitem","checkbox","tablerow","tablecell","flags","prot","decodeURIComponent","e","baseUrl","originIndependentUrl","encodeURI","parse","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","obj","target","key","arguments","hasOwnProperty","call","tableRow","count","offset","str","curr","splice","c","invert","suffLen","currChar","substr","callback","pending","done","err","message","silent","setOptions","getDefaults","parser","lexer","inlineLexer","module","exports","window"],"mappings":"sLA2BAA,GACAC,YACAC,UAAA,GAEAC,KAJA,WAKA,OACAC,QAAA,GACAC,MAAA,GACAC,KAAA,GACAC,IAAA,KAGAC,UACAC,KADA,WAEA,OAAAC,IAAAC,KAAAP,UAEAQ,UAJA,WAKA,OAAAD,KAAAE,OAAAC,MAAAF,YAGAG,QApBA,WAoBA,IAAAC,EAAAL,KAAA,OAAAM,IAAAC,EAAAC,EAAAV,KAAA,SAAAW,IAAA,IAAAC,EAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEAR,EAAAH,OAAAa,OAAA,iBAFAH,EAAAE,KAAA,EAGAT,EAAAW,UACAC,KAAA,cAAAZ,EAAAa,OAAAC,OAAAC,GACA5B,QACA6B,OAAA,QANA,OAGAX,EAHAE,EAAAU,KAQAjB,EAAAZ,QAAAiB,EAAAa,QACAlB,EAAAX,MAAAgB,EAAAhB,MACAW,EAAAV,KAAA6B,OAAAC,OAAAf,EAAAf,OAAA+B,OAAA,cACArB,EAAAT,IAAAc,EAAAd,IACAS,EAAAH,OAAAa,OAAA,iBAZAH,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,kCAAAA,EAAAgB,SAAAnB,EAAAJ,IAAA,UAAAC,IAiBAuB,QArCA,aAsCAC,YC9DAC,GADiBC,OAFjB,WAA0B,IAAAC,EAAAjC,KAAakC,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,qBAA+BL,EAAAM,GAAA,aAAAN,EAAAhC,UAAAgC,EAAAO,KAAAJ,EAAA,MAAAH,EAAAM,GAAAN,EAAAQ,GAAAR,EAAAvC,UAAAuC,EAAAM,GAAA,KAAAH,EAAA,OAA2GM,aAAaC,YAAA,OAAAC,MAAA,UAAAC,iBAAA,OAAAC,gBAAA,uBAAkGV,EAAA,OAAYE,YAAA,QAAkBL,EAAAM,GAAA,MAAAN,EAAAQ,GAAAR,EAAArC,QAAAqC,EAAAM,GAAA,KAAAH,EAAA,OAAwDE,YAAA,SAAmBL,EAAAM,GAAA,MAAAN,EAAAQ,GAAAR,EAAAtC,WAAAsC,EAAAM,GAAA,KAAAN,EAAAhC,UAA+LgC,EAAAO,KAA/LJ,EAAA,OAA4EW,aAAaC,KAAA,YAAAC,QAAA,gBAAuCC,OAASzD,QAAA,IAAa0D,UAAWC,UAAAnB,EAAAQ,GAAAR,EAAAnC,SAA8BmC,EAAAM,GAAA,KAAAH,EAAA,OAAiCE,YAAA,YAAsBL,EAAAM,GAAA,KAAAN,EAAA,UAAAG,EAAA,OAAwCE,YAAA,YAAsBF,EAAA,eAAAH,EAAAO,QAE/uBa,oBCCjB,IAcAC,EAdAC,EAAA,OAcAC,CACAnE,EACA0C,GATA,EAVA,SAAA0B,GACAF,EAAA,SAaA,kBAEA,MAUAG,EAAA,QAAAJ,EAAA,+BC1BA,SAAAK,IAMC,SAAAC,GACD,aAMA,IAAAC,GACAC,QAAA,OACAC,KAAA,oBACAC,OAAAC,EACAC,GAAA,yDACAC,QAAA,6CACAC,QAAAH,EACAI,WAAA,0CACAC,KAAA,gEACAC,KAAA,kYAUAC,IAAA,mFACAC,MAAAR,EACAS,SAAA,oCACAC,UAAA,4GACAC,KAAA,WAmGA,SAAAC,EAAAC,GACA9E,KAAA+E,UACA/E,KAAA+E,OAAAC,MAAAC,OAAAC,OAAA,MACAlF,KAAA8E,WAAAK,EAAAC,SACApF,KAAAqF,MAAAxB,EAAAyB,OAEAtF,KAAA8E,QAAAS,SACAvF,KAAAqF,MAAAxB,EAAA0B,SACGvF,KAAA8E,QAAAU,MACHxF,KAAA8E,QAAAW,OACAzF,KAAAqF,MAAAxB,EAAA4B,OAEAzF,KAAAqF,MAAAxB,EAAA2B,KA5GA3B,EAAA6B,OAAA,iCACA7B,EAAA8B,OAAA,+DACA9B,EAAAW,IAAAoB,EAAA/B,EAAAW,KACAqB,QAAA,QAAAhC,EAAA6B,QACAG,QAAA,QAAAhC,EAAA8B,QACAG,WAEAjC,EAAAkC,OAAA,kBACAlC,EAAAmC,KAAA,6CACAnC,EAAAmC,KAAAJ,EAAA/B,EAAAmC,KAAA,MACAH,QAAA,QAAAhC,EAAAkC,QACAD,WAEAjC,EAAAS,KAAAsB,EAAA/B,EAAAS,MACAuB,QAAA,QAAAhC,EAAAkC,QACAF,QAAA,wEACAA,QAAA,gBAAAhC,EAAAW,IAAAyB,OAAA,KACAH,WAEAjC,EAAAqC,KAAA,gWAMArC,EAAAsC,SAAA,yBACAtC,EAAAU,KAAAqB,EAAA/B,EAAAU,KAAA,KACAsB,QAAA,UAAAhC,EAAAsC,UACAN,QAAA,MAAAhC,EAAAqC,MACAL,QAAA,wFACAC,WAEAjC,EAAAc,UAAAiB,EAAA/B,EAAAc,WACAkB,QAAA,KAAAhC,EAAAK,IACA2B,QAAA,UAAAhC,EAAAM,SACA0B,QAAA,WAAAhC,EAAAa,UACAmB,QAAA,MAAAhC,EAAAqC,MACAJ,WAEAjC,EAAAQ,WAAAuB,EAAA/B,EAAAQ,YACAwB,QAAA,YAAAhC,EAAAc,WACAmB,WAMAjC,EAAAyB,OAAAc,KAAuBvC,GAMvBA,EAAA2B,IAAAY,KAAoBvC,EAAAyB,QACpBtB,OAAA,+DACAW,UAAA,IACAR,QAAA,0CAGAN,EAAA2B,IAAAb,UAAAiB,EAAA/B,EAAAc,WACAkB,QAAA,YACAhC,EAAA2B,IAAAxB,OAAAiC,OAAAJ,QAAA,iBACAhC,EAAAS,KAAA2B,OAAAJ,QAAA,kBACAC,WAMAjC,EAAA4B,OAAAW,KAAuBvC,EAAA2B,KACvBpB,QAAA,gFACAK,MAAA,0EAOAZ,EAAA0B,SAAAa,KAAyBvC,EAAAyB,QACzBf,KAAAqB,EACA,8IAGAC,QAAA,UAAAhC,EAAAsC,UACAN,QAAA,4KAIAC,WACAtB,IAAA,sEA4BAK,EAAAQ,MAAAxB,EAMAgB,EAAAwB,IAAA,SAAAC,EAAAxB,GAEA,OADA,IAAAD,EAAAC,GACAuB,IAAAC,IAOAzB,EAAA0B,UAAAF,IAAA,SAAAC,GAOA,OANAA,IACAT,QAAA,iBACAA,QAAA,cACAA,QAAA,eACAA,QAAA,gBAEA7F,KAAAwG,MAAAF,GAAA,IAOAzB,EAAA0B,UAAAC,MAAA,SAAAF,EAAAG,GAEA,IAAA3F,EACA4F,EACAC,EACAC,EACAC,EACAb,EACAc,EACAC,EACAC,EACAC,EACAC,EACAtH,EACAuH,EACAC,EACAC,EACAC,EAEA,IAlBAhB,IAAAT,QAAA,aAkBAS,GAYA,IAVAK,EAAA3G,KAAAqF,MAAAvB,QAAAyD,KAAAjB,MACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAd,EAAA,GAAAc,OAAA,GACAzH,KAAA+E,OAAA2C,MACAC,KAAA,WAMAhB,EAAA3G,KAAAqF,MAAAtB,KAAAwD,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAd,IAAA,GAAAd,QAAA,UAAiC,IACjC7F,KAAA+E,OAAA2C,MACAC,KAAA,OACA/C,KAAA5E,KAAA8E,QAAAS,SAEAoB,EADAiB,EAAAjB,EAAA,aAOA,GAAAA,EAAA3G,KAAAqF,MAAArB,OAAAuD,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAA+E,OAAA2C,MACAC,KAAA,OACAE,KAAAlB,EAAA,GACA/B,KAAA+B,EAAA,cAMA,GAAAA,EAAA3G,KAAAqF,MAAAlB,QAAAoD,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAA+E,OAAA2C,MACAC,KAAA,UACAG,MAAAnB,EAAA,GAAAc,OACA7C,KAAA+B,EAAA,UAMA,GAAAF,IAAAE,EAAA3G,KAAAqF,MAAAjB,QAAAmD,KAAAjB,MACAN,GACA2B,KAAA,QACAI,OAAAC,EAAArB,EAAA,GAAAd,QAAA,oBACAoC,MAAAtB,EAAA,GAAAd,QAAA,iBAAAqC,MAAA,UACAC,MAAAxB,EAAA,GAAAA,EAAA,GAAAd,QAAA,UAAAqC,MAAA,WAGAH,OAAAN,SAAAzB,EAAAiC,MAAAR,OARA,CAWA,IAFAnB,IAAAkB,UAAAb,EAAA,GAAAc,QAEAP,EAAA,EAAmBA,EAAAlB,EAAAiC,MAAAR,OAAuBP,IAC1C,YAAAkB,KAAApC,EAAAiC,MAAAf,IACAlB,EAAAiC,MAAAf,GAAA,QACW,aAAAkB,KAAApC,EAAAiC,MAAAf,IACXlB,EAAAiC,MAAAf,GAAA,SACW,YAAAkB,KAAApC,EAAAiC,MAAAf,IACXlB,EAAAiC,MAAAf,GAAA,OAEAlB,EAAAiC,MAAAf,GAAA,KAIA,IAAAA,EAAA,EAAmBA,EAAAlB,EAAAmC,MAAAV,OAAuBP,IAC1ClB,EAAAmC,MAAAjB,GAAAc,EAAAhC,EAAAmC,MAAAjB,GAAAlB,EAAA+B,OAAAN,QAGAzH,KAAA+E,OAAA2C,KAAA1B,QAOA,GAAAW,EAAA3G,KAAAqF,MAAAnB,GAAAqD,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAA+E,OAAA2C,MACAC,KAAA,YAMA,GAAAhB,EAAA3G,KAAAqF,MAAAhB,WAAAkD,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QAEAzH,KAAA+E,OAAA2C,MACAC,KAAA,qBAGAhB,IAAA,GAAAd,QAAA,eAKA7F,KAAAwG,MAAAG,EAAAF,GAEAzG,KAAA+E,OAAA2C,MACAC,KAAA,wBAOA,GAAAhB,EAAA3G,KAAAqF,MAAAf,KAAAiD,KAAAjB,GAAA,CAsBA,IArBAA,IAAAkB,UAAAb,EAAA,GAAAc,QAIAX,GACAa,KAAA,aACAU,QAJAjB,GADAR,EAAAD,EAAA,IACAc,OAAA,EAKAa,MAAAlB,GAAAR,EAAA,GACAF,OAAA,GAGA1G,KAAA+E,OAAA2C,KAAAZ,GAKAC,KACAjG,GAAA,EACAqG,GAJAR,IAAA,GAAA4B,MAAAvI,KAAAqF,MAAAW,OAIAyB,OACAP,EAAA,EAEYA,EAAAC,EAAOD,IAKnBD,GAJAjB,EAAAW,EAAAO,IAIAO,SACAzB,IAAAH,QAAA,0BAIA2C,QAAA,SACAvB,GAAAjB,EAAAyB,OACAzB,EAAAhG,KAAA8E,QAAAS,SAEAS,EAAAH,QAAA,YAAmC,IADnCG,EAAAH,QAAA,IAAA4C,OAAA,QAA0CxB,EAAA,IAAgB,WAM1DjH,KAAA8E,QAAA4D,YAAAxB,IAAAC,EAAA,IAEAP,KADAC,EAAAhD,EAAAkC,OAAAwB,KAAAZ,EAAAO,EAAA,SACAN,EAAAa,OAAA,GAAAZ,EAAAY,OAAA,IACAnB,EAAAK,EAAAgC,MAAAzB,EAAA,GAAA0B,KAAA,MAAAtC,EACAY,EAAAC,EAAA,IAOAT,EAAA5F,GAAA,eAAAsH,KAAApC,GACAkB,IAAAC,EAAA,IACArG,EAAA,OAAAkF,EAAA6C,OAAA7C,EAAAyB,OAAA,GACAf,MAAA5F,IAGA4F,IACAI,EAAAJ,OAAA,GAKAY,OAAAwB,GADAzB,EAAA,cAAAe,KAAApC,MAGAsB,EAAA,MAAAtB,EAAA,GACAA,IAAAH,QAAA,oBAGAmB,GACAW,KAAA,kBACAoB,KAAA1B,EACA2B,QAAA1B,EACAZ,SAGAK,EAAAW,KAAAV,GACAhH,KAAA+E,OAAA2C,KAAAV,GAGAhH,KAAAwG,MAAAR,GAAA,GAEAhG,KAAA+E,OAAA2C,MACAC,KAAA,kBAIA,GAAAb,EAAAJ,MAGA,IAFAS,EAAAJ,EAAAU,OACAP,EAAA,EACcA,EAAAC,EAAOD,IACrBH,EAAAG,GAAAR,OAAA,EAIA1G,KAAA+E,OAAA2C,MACAC,KAAA,kBAOA,GAAAhB,EAAA3G,KAAAqF,MAAAd,KAAAgD,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAA+E,OAAA2C,MACAC,KAAA3H,KAAA8E,QAAAmE,SACA,YACA,OACAC,KAAAlJ,KAAA8E,QAAAqE,YACA,QAAAxC,EAAA,eAAAA,EAAA,cAAAA,EAAA,IACA/B,KAAA+B,EAAA,UAMA,GAAAF,IAAAE,EAAA3G,KAAAqF,MAAAb,IAAA+C,KAAAjB,IACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAd,EAAA,KAAAA,EAAA,GAAAA,EAAA,GAAAa,UAAA,EAAAb,EAAA,GAAAc,OAAA,IACA7H,EAAA+G,EAAA,GAAAyC,cAAAvD,QAAA,YACA7F,KAAA+E,OAAAC,MAAApF,KACAI,KAAA+E,OAAAC,MAAApF,IACAyJ,KAAA1C,EAAA,GACAjH,MAAAiH,EAAA,UAOA,GAAAF,IAAAE,EAAA3G,KAAAqF,MAAAZ,MAAA8C,KAAAjB,MACAN,GACA2B,KAAA,QACAI,OAAAC,EAAArB,EAAA,GAAAd,QAAA,oBACAoC,MAAAtB,EAAA,GAAAd,QAAA,iBAAAqC,MAAA,UACAC,MAAAxB,EAAA,GAAAA,EAAA,GAAAd,QAAA,qBAAAqC,MAAA,WAGAH,OAAAN,SAAAzB,EAAAiC,MAAAR,OARA,CAWA,IAFAnB,IAAAkB,UAAAb,EAAA,GAAAc,QAEAP,EAAA,EAAmBA,EAAAlB,EAAAiC,MAAAR,OAAuBP,IAC1C,YAAAkB,KAAApC,EAAAiC,MAAAf,IACAlB,EAAAiC,MAAAf,GAAA,QACW,aAAAkB,KAAApC,EAAAiC,MAAAf,IACXlB,EAAAiC,MAAAf,GAAA,SACW,YAAAkB,KAAApC,EAAAiC,MAAAf,IACXlB,EAAAiC,MAAAf,GAAA,OAEAlB,EAAAiC,MAAAf,GAAA,KAIA,IAAAA,EAAA,EAAmBA,EAAAlB,EAAAmC,MAAAV,OAAuBP,IAC1ClB,EAAAmC,MAAAjB,GAAAc,EACAhC,EAAAmC,MAAAjB,GAAArB,QAAA,uBACAG,EAAA+B,OAAAN,QAGAzH,KAAA+E,OAAA2C,KAAA1B,QAOA,GAAAW,EAAA3G,KAAAqF,MAAAX,SAAA6C,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAA+E,OAAA2C,MACAC,KAAA,UACAG,MAAA,MAAAnB,EAAA,OACA/B,KAAA+B,EAAA,UAMA,GAAAF,IAAAE,EAAA3G,KAAAqF,MAAAV,UAAA4C,KAAAjB,IACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAA+E,OAAA2C,MACAC,KAAA,YACA/C,KAAA,OAAA+B,EAAA,GAAAkC,OAAAlC,EAAA,GAAAc,OAAA,GACAd,EAAA,GAAAgC,MAAA,MACAhC,EAAA,UAMA,GAAAA,EAAA3G,KAAAqF,MAAAT,KAAA2C,KAAAjB,GAEAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAA+E,OAAA2C,MACAC,KAAA,OACA/C,KAAA+B,EAAA,UAKA,GAAAL,EACA,UAAAgD,MAAA,0BAAAhD,EAAAiD,WAAA,IAIA,OAAAvJ,KAAA+E,QAOA,IAAAyE,GACAC,OAAA,8CACAC,SAAA,sCACAC,IAAA1F,EACArE,IAAA,2JAMAgK,KAAA,2CACAC,QAAA,wDACAC,OAAA,gEACAC,OAAA,8GACAC,GAAA,iLACAjG,KAAA,oCACAkG,GAAA,wBACAC,IAAAjG,EACAW,KAAA,yCAoFA,SAAAuF,EAAAnF,EAAAF,GAOA,GANA9E,KAAA8E,WAAAK,EAAAC,SACApF,KAAAgF,QACAhF,KAAAqF,MAAAmE,EAAAlE,OACAtF,KAAAoK,SAAApK,KAAA8E,QAAAsF,UAAA,IAAAC,EACArK,KAAAoK,SAAAtF,QAAA9E,KAAA8E,SAEA9E,KAAAgF,MACA,UAAAsE,MAAA,6CAGAtJ,KAAA8E,QAAAS,SACAvF,KAAAqF,MAAAmE,EAAAjE,SACGvF,KAAA8E,QAAAU,MACHxF,KAAA8E,QAAAwF,OACAtK,KAAAqF,MAAAmE,EAAAc,OAEAtK,KAAAqF,MAAAmE,EAAAhE,KA4PA,SAAA6E,EAAAvF,GACA9E,KAAA8E,WAAAK,EAAAC,SA2KA,SAAAmF,KAyBA,SAAAC,EAAA1F,GACA9E,KAAA+E,UACA/E,KAAAwG,MAAA,KACAxG,KAAA8E,WAAAK,EAAAC,SACApF,KAAA8E,QAAAsF,SAAApK,KAAA8E,QAAAsF,UAAA,IAAAC,EACArK,KAAAoK,SAAApK,KAAA8E,QAAAsF,SACApK,KAAAoK,SAAAtF,QAAA9E,KAAA8E,QA4KA,SAAA2E,EAAAlF,EAAAkG,GACA,OAAAlG,EACAsB,QAAA4E,EAAkC,KAAlC,eAAkC,SAClC5E,QAAA,aACAA,QAAA,aACAA,QAAA,eACAA,QAAA,cAGA,SAAA6E,EAAAnG,GAEA,OAAAA,EAAAsB,QAAA,6CAA8D,SAAA8E,EAAAC,GAE9D,iBADAA,IAAAxB,eACA,IACA,MAAAwB,EAAA/B,OAAA,GACA,MAAA+B,EAAA/B,OAAA,GACAgC,OAAAC,aAAAC,SAAAH,EAAApD,UAAA,QACAqD,OAAAC,cAAAF,EAAApD,UAAA,IAEA,KAIA,SAAA5B,EAAAoF,EAAAC,GAGA,OAFAD,IAAA/E,QAAA+E,EACAC,KAAA,IAEApF,QAAA,SAAA7C,EAAAkI,GAIA,OAFAA,GADAA,IAAAjF,QAAAiF,GACArF,QAAA,qBACAmF,IAAAnF,QAAA7C,EAAAkI,GACAlL,MAEA8F,SAAA,WACA,WAAA2C,OAAAuC,EAAAC,KAKA,SAAAE,EAAAC,EAAA/B,GAaA,OAZAgC,EAAA,IAAAD,KAIA,mBAAAhD,KAAAgD,GACAC,EAAA,IAAAD,KAAA,IAEAC,EAAA,IAAAD,GAAAxD,EAAAwD,EAAA,SAGAA,EAAAC,EAAA,IAAAD,GAEA,OAAA/B,EAAAV,MAAA,KACAyC,EAAAvF,QAAA,gBAAAwD,EACG,MAAAA,EAAAR,OAAA,GACHuC,EAAAvF,QAAA,2BAAAwD,EAEA+B,EAAA/B,EA9wBAG,EAAA8B,SAAA,8CAEA9B,EAAA+B,QAAA,+BACA/B,EAAAgC,OAAA,+IACAhC,EAAAE,SAAA9D,EAAA4D,EAAAE,UACA7D,QAAA,SAAA2D,EAAA+B,SACA1F,QAAA,QAAA2D,EAAAgC,QACA1F,WAEA0D,EAAAiC,WAAA,8EAEAjC,EAAA5J,IAAAgG,EAAA4D,EAAA5J,KACAiG,QAAA,UAAAhC,EAAAsC,UACAN,QAAA,YAAA2D,EAAAiC,YACA3F,WAEA0D,EAAA9D,OAAA,iDACA8D,EAAAkC,MAAA,uFACAlC,EAAA7D,OAAA,8DAEA6D,EAAAI,KAAAhE,EAAA4D,EAAAI,MACA/D,QAAA,QAAA2D,EAAA9D,QACAG,QAAA,OAAA2D,EAAAkC,OACA7F,QAAA,QAAA2D,EAAA7D,QACAG,WAEA0D,EAAAK,QAAAjE,EAAA4D,EAAAK,SACAhE,QAAA,QAAA2D,EAAA9D,QACAI,WAMA0D,EAAAlE,OAAAc,KAAwBoD,GAMxBA,EAAAjE,SAAAa,KAA0BoD,EAAAlE,QAC1ByE,OAAA,iEACAC,GAAA,2DACAJ,KAAAhE,EAAA,2BACAC,QAAA,QAAA2D,EAAA9D,QACAI,WACA+D,QAAAjE,EAAA,iCACAC,QAAA,QAAA2D,EAAA9D,QACAI,aAOA0D,EAAAhE,IAAAY,KAAqBoD,EAAAlE,QACrBmE,OAAA7D,EAAA4D,EAAAC,QAAA5D,QAAA,aAAAC,WACA6D,IAAA/D,EAAA,oEACAC,QAAA,QAAA2D,EAAAgC,QACA1F,WACA6F,WAAA,yEACAzB,IAAA,0BACAtF,KAAAgB,EAAA4D,EAAA5E,MACAiB,QAAA,YACAA,QAAA,qEACAC,aAOA0D,EAAAc,OAAAlE,KAAwBoD,EAAAhE,KACxByE,GAAArE,EAAA4D,EAAAS,IAAApE,QAAA,OAAmC,KAAAC,WACnClB,KAAAgB,EAAA4D,EAAAhE,IAAAZ,MAAAiB,QAAA,OAA2C,KAAAC,aAiC3CqE,EAAA9E,MAAAmE,EAMAW,EAAAyB,OAAA,SAAAtF,EAAAtB,EAAAF,GAEA,OADA,IAAAqF,EAAAnF,EAAAF,GACA8G,OAAAtF,IAOA6D,EAAA5D,UAAAqF,OAAA,SAAAtF,GASA,IARA,IACAsD,EACAhF,EACAyE,EACA3J,EACAiH,EACAkF,EANAC,EAAA,GAQAxF,GAEA,GAAAK,EAAA3G,KAAAqF,MAAAoE,OAAAlC,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAAnF,EAAA,QAKA,GAAAA,EAAA3G,KAAAqF,MAAAqE,SAAAnC,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QAGA4B,EAFA,MAAA1C,EAAA,GAEA,WADA/B,EAAA6E,EAAAzJ,KAAA+L,OAAApF,EAAA,MAGA/B,EAAA6E,EAAA9C,EAAA,IAGAmF,GAAA9L,KAAAoK,SAAAR,KAAAP,EAAA,KAAAzE,QAKA,GAAA5E,KAAAgM,UAAArF,EAAA3G,KAAAqF,MAAAsE,IAAApC,KAAAjB,KAsBA,GAAAK,EAAA3G,KAAAqF,MAAAzF,IAAA2H,KAAAjB,IACAtG,KAAAgM,QAAA,QAAA5D,KAAAzB,EAAA,IACA3G,KAAAgM,QAAA,EACOhM,KAAAgM,QAAA,UAAA5D,KAAAzB,EAAA,MACP3G,KAAAgM,QAAA,GAEA1F,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAA9L,KAAA8E,QAAAmE,SACAjJ,KAAA8E,QAAAqE,UACAnJ,KAAA8E,QAAAqE,UAAAxC,EAAA,IACA8C,EAAA9C,EAAA,IACAA,EAAA,QAKA,GAAAA,EAAA3G,KAAAqF,MAAAuE,KAAArC,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAzH,KAAAgM,QAAA,EACA3C,EAAA1C,EAAA,GACA3G,KAAA8E,QAAAS,UACAqE,EAAA,gCAAArC,KAAA8B,KAGAA,EAAAO,EAAA,GACAlK,EAAAkK,EAAA,IAEAlK,EAAA,GAGAA,EAAAiH,EAAA,GAAAA,EAAA,GAAAgC,MAAA,SAEAU,IAAA4C,OAAApG,QAAA,sBACAiG,GAAA9L,KAAAkM,WAAAvF,GACA0C,KAAAc,EAAAgC,QAAA9C,GACA3J,MAAAyK,EAAAgC,QAAAzM,KAEAM,KAAAgM,QAAA,OAKA,IAAArF,EAAA3G,KAAAqF,MAAAwE,QAAAtC,KAAAjB,MACAK,EAAA3G,KAAAqF,MAAAyE,OAAAvC,KAAAjB,IADA,CAKA,GAHAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAmC,GAAAjD,EAAA,IAAAA,EAAA,IAAAd,QAAA,cACA+D,EAAA5J,KAAAgF,MAAA4E,EAAAR,kBACAQ,EAAAP,KAAA,CACAyC,GAAAnF,EAAA,GAAAkC,OAAA,GACAvC,EAAAK,EAAA,GAAAa,UAAA,GAAAlB,EACA,SAEAtG,KAAAgM,QAAA,EACAF,GAAA9L,KAAAkM,WAAAvF,EAAAiD,GACA5J,KAAAgM,QAAA,OAKA,GAAArF,EAAA3G,KAAAqF,MAAA0E,OAAAxC,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAA9L,KAAAoK,SAAAL,OAAA/J,KAAA4L,OAAAjF,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,UAKA,GAAAA,EAAA3G,KAAAqF,MAAA2E,GAAAzC,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAA9L,KAAAoK,SAAAJ,GAAAhK,KAAA4L,OAAAjF,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,UAKA,GAAAA,EAAA3G,KAAAqF,MAAAtB,KAAAwD,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAA9L,KAAAoK,SAAAgC,SAAA3C,EAAA9C,EAAA,GAAAsF,QAAA,SAKA,GAAAtF,EAAA3G,KAAAqF,MAAA4E,GAAA1C,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAA9L,KAAAoK,SAAAH,UAKA,GAAAtD,EAAA3G,KAAAqF,MAAA6E,IAAA3C,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAA9L,KAAAoK,SAAAF,IAAAlK,KAAA4L,OAAAjF,EAAA,UAKA,GAAAA,EAAA3G,KAAAqF,MAAAT,KAAA2C,KAAAjB,GACAA,IAAAkB,UAAAb,EAAA,GAAAc,QACAqE,GAAA9L,KAAAoK,SAAAxF,KAAA6E,EAAAzJ,KAAAqM,YAAA1F,EAAA,WAIA,GAAAL,EACA,UAAAgD,MAAA,0BAAAhD,EAAAiD,WAAA,QA3HA,CACA,GACAsC,EAAAlF,EAAA,GACAA,EAAA,GAAA3G,KAAAqF,MAAAsG,WAAApE,KAAAZ,EAAA,aACOkF,IAAAlF,EAAA,IACPL,IAAAkB,UAAAb,EAAA,GAAAc,QACA,MAAAd,EAAA,GAEA0C,EAAA,WADAzE,EAAA6E,EAAA9C,EAAA,MAGA/B,EAAA6E,EAAA9C,EAAA,IAEA0C,EADA,SAAA1C,EAAA,GACA,UAAA/B,EAEAA,GAGAkH,GAAA9L,KAAAoK,SAAAR,KAAAP,EAAA,KAAAzE,GA8GA,OAAAkH,GAGA3B,EAAAgC,QAAA,SAAAvH,GACA,OAAAA,IAAAiB,QAAAsE,EAAA9E,MAAAiG,SAAA,MAAA1G,GAOAuF,EAAA5D,UAAA2F,WAAA,SAAAvF,EAAAiD,GACA,IAAAP,EAAAO,EAAAP,KACA3J,EAAAkK,EAAAlK,MAAA+J,EAAAG,EAAAlK,OAAA,KAEA,YAAAiH,EAAA,GAAAkC,OAAA,GACA7I,KAAAoK,SAAAR,KAAAP,EAAA3J,EAAAM,KAAA4L,OAAAjF,EAAA,KACA3G,KAAAoK,SAAAkC,MAAAjD,EAAA3J,EAAA+J,EAAA9C,EAAA,MAOAwD,EAAA5D,UAAA8F,YAAA,SAAAzH,GACA,OAAA5E,KAAA8E,QAAAuH,YACAzH,EAEAiB,QAAA,YAEAA,QAAA,WAEAA,QAAA,0BAA8B,OAE9BA,QAAA,UAEAA,QAAA,+BAA8B,OAE9BA,QAAA,UAEAA,QAAA,SAAmB,KAfnBjB,GAsBAuF,EAAA5D,UAAAwF,OAAA,SAAAnH,GACA,IAAA5E,KAAA8E,QAAAiH,OAAA,OAAAnH,EAMA,IALA,IAGA2H,EAHAT,EAAA,GACA3E,EAAAvC,EAAA6C,OACAP,EAAA,EAGQA,EAAAC,EAAOD,IACfqF,EAAA3H,EAAA2E,WAAArC,GACAsF,KAAAC,SAAA,KACAF,EAAA,IAAAA,EAAAG,SAAA,KAEAZ,GAAA,KAAAS,EAAA,IAGA,OAAAT,GAWAzB,EAAA9D,UAAAxC,KAAA,SAAAA,EAAA8D,EAAA8E,GACA,GAAA3M,KAAA8E,QAAA8H,UAAA,CACA,IAAAd,EAAA9L,KAAA8E,QAAA8H,UAAA7I,EAAA8D,GACA,MAAAiE,OAAA/H,IACA4I,GAAA,EACA5I,EAAA+H,GAIA,OAAAjE,EAMA,qBACA7H,KAAA8E,QAAA+H,WACApD,EAAA5B,GAAA,GACA,MACA8E,EAAA5I,EAAA0F,EAAA1F,GAAA,IACA,kBAVA,eACA4I,EAAA5I,EAAA0F,EAAA1F,GAAA,IACA,iBAWAsG,EAAA9D,UAAAlC,WAAA,SAAAyI,GACA,uBAAAA,EAAA,mBAGAzC,EAAA9D,UAAAhC,KAAA,SAAAA,GACA,OAAAA,GAGA8F,EAAA9D,UAAApC,QAAA,SAAAS,EAAAmI,EAAAC,GACA,OAAAhN,KAAA8E,QAAAmI,UACA,KACAF,EACA,QACA/M,KAAA8E,QAAAoI,aACAF,EAAA5D,cAAAvD,QAAA,eACA,KACAjB,EACA,MACAmI,EACA,MAGA,KAAAA,EAAA,IAAAnI,EAAA,MAAAmI,EAAA,OAGA1C,EAAA9D,UAAArC,GAAA,WACA,OAAAlE,KAAA8E,QAAAqI,MAAA,oBAGA9C,EAAA9D,UAAAjC,KAAA,SAAA8I,EAAA/E,EAAAC,GACA,IAAAX,EAAAU,EAAA,UAEA,UAAAV,GADAU,GAAA,IAAAC,EAAA,WAAAA,EAAA,QACA,MAAA8E,EAAA,KAAAzF,EAAA,OAGA0C,EAAA9D,UAAA8G,SAAA,SAAAzI,GACA,aAAAA,EAAA,WAGAyF,EAAA9D,UAAA+G,SAAA,SAAAtE,GACA,iBACAA,EAAA,kBACA,+BACAhJ,KAAA8E,QAAAqI,MAAA,SACA,MAGA9C,EAAA9D,UAAA5B,UAAA,SAAAC,GACA,YAAAA,EAAA,UAGAyF,EAAA9D,UAAA9B,MAAA,SAAAsD,EAAAqF,GAGA,OAFAA,MAAA,UAAAA,EAAA,YAEA,qBAEArF,EACA,aACAqF,EACA,cAGA/C,EAAA9D,UAAAgH,SAAA,SAAAhM,GACA,eAAAA,EAAA,WAGA8I,EAAA9D,UAAAiH,UAAA,SAAAjM,EAAAkM,GACA,IAAA9F,EAAA8F,EAAA1F,OAAA,UAIA,OAHA0F,EAAAxF,MACA,IAAAN,EAAA,WAAA8F,EAAAxF,MAAA,KACA,IAAAN,EAAA,KACApG,EAAA,KAAAoG,EAAA,OAIA0C,EAAA9D,UAAAwD,OAAA,SAAAnF,GACA,iBAAAA,EAAA,aAGAyF,EAAA9D,UAAAyD,GAAA,SAAApF,GACA,aAAAA,EAAA,SAGAyF,EAAA9D,UAAA6F,SAAA,SAAAxH,GACA,eAAAA,EAAA,WAGAyF,EAAA9D,UAAA0D,GAAA,WACA,OAAAjK,KAAA8E,QAAAqI,MAAA,gBAGA9C,EAAA9D,UAAA2D,IAAA,SAAAtF,GACA,cAAAA,EAAA,UAGAyF,EAAA9D,UAAAqD,KAAA,SAAAP,EAAA3J,EAAAkF,GACA,GAAA5E,KAAA8E,QAAAmE,SAAA,CACA,IACA,IAAAyE,EAAAC,mBAAAjD,EAAArB,IACAxD,QAAA,cACAuD,cACK,MAAAwE,GACL,OAAAhJ,EAEA,OAAA8I,EAAAlF,QAAA,oBAAAkF,EAAAlF,QAAA,kBAAAkF,EAAAlF,QAAA,SACA,OAAA5D,EAGA5E,KAAA8E,QAAA+I,UAAAC,EAAA1F,KAAAiB,KACAA,EAAA8B,EAAAnL,KAAA8E,QAAA+I,QAAAxE,IAEA,IACAA,EAAA0E,UAAA1E,GAAAxD,QAAA,YACG,MAAA+H,GACH,OAAAhJ,EAEA,IAAAkH,EAAA,YAAArC,EAAAJ,GAAA,IAKA,OAJA3J,IACAoM,GAAA,WAAApM,EAAA,KAEAoM,GAAA,IAAAlH,EAAA,QAIAyF,EAAA9D,UAAA+F,MAAA,SAAAjD,EAAA3J,EAAAkF,GACA5E,KAAA8E,QAAA+I,UAAAC,EAAA1F,KAAAiB,KACAA,EAAA8B,EAAAnL,KAAA8E,QAAA+I,QAAAxE,IAEA,IAAAyC,EAAA,aAAAzC,EAAA,UAAAzE,EAAA,IAKA,OAJAlF,IACAoM,GAAA,WAAApM,EAAA,KAEAoM,GAAA9L,KAAA8E,QAAAqI,MAAA,UAIA9C,EAAA9D,UAAA3B,KAAA,SAAAA,GACA,OAAAA,GAYA2F,EAAAhE,UAAAwD,OACAQ,EAAAhE,UAAAyD,GACAO,EAAAhE,UAAA6F,SACA7B,EAAAhE,UAAA2D,IACAK,EAAAhE,UAAA3B,KAAA,SAAAA,GACA,OAAAA,GAGA2F,EAAAhE,UAAAqD,KACAW,EAAAhE,UAAA+F,MAAA,SAAAjD,EAAA3J,EAAAkF,GACA,SAAAA,GAGA2F,EAAAhE,UAAA0D,GAAA,WACA,UAoBAO,EAAAwD,MAAA,SAAA1H,EAAAxB,GAEA,OADA,IAAA0F,EAAA1F,GACAkJ,MAAA1H,IAOAkE,EAAAjE,UAAAyH,MAAA,SAAA1H,GACAtG,KAAAwJ,OAAA,IAAAW,EAAA7D,EAAAtB,MAAAhF,KAAA8E,SAEA9E,KAAAiO,WAAA,IAAA9D,EACA7D,EAAAtB,MACAoB,KAAYpG,KAAA8E,SAAiBsF,SAAA,IAAAG,KAE7BvK,KAAA+E,OAAAuB,EAAA4H,UAGA,IADA,IAAApC,EAAA,GACA9L,KAAAc,QACAgL,GAAA9L,KAAAmO,MAGA,OAAArC,GAOAtB,EAAAjE,UAAAzF,KAAA,WACA,OAAAd,KAAAwG,MAAAxG,KAAA+E,OAAAqJ,OAOA5D,EAAAjE,UAAA8H,KAAA,WACA,OAAArO,KAAA+E,OAAA/E,KAAA+E,OAAA0C,OAAA,OAOA+C,EAAAjE,UAAA+H,UAAA,WAGA,IAFA,IAAAlB,EAAApN,KAAAwG,MAAA5B,KAEA,SAAA5E,KAAAqO,OAAA1G,MACAyF,GAAA,KAAApN,KAAAc,OAAA8D,KAGA,OAAA5E,KAAAwJ,OAAAoC,OAAAwB,IAOA5C,EAAAjE,UAAA4H,IAAA,WACA,OAAAnO,KAAAwG,MAAAmB,MACA,YACA,SAEA,SACA,OAAA3H,KAAAoK,SAAAlG,KAEA,cACA,OAAAlE,KAAAoK,SAAAjG,QACAnE,KAAAwJ,OAAAoC,OAAA5L,KAAAwG,MAAA5B,MACA5E,KAAAwG,MAAAsB,MACA4C,EAAA1K,KAAAiO,WAAArC,OAAA5L,KAAAwG,MAAA5B,QAEA,WACA,OAAA5E,KAAAoK,SAAArG,KAAA/D,KAAAwG,MAAA5B,KACA5E,KAAAwG,MAAAqB,KACA7H,KAAAwG,MAAAmG,SAEA,YACA,IAEAzF,EACAqH,EACAC,EACAC,EALA1G,EAAA,GACAqF,EAAA,GAQA,IADAoB,EAAA,GACAtH,EAAA,EAAiBA,EAAAlH,KAAAwG,MAAAuB,OAAAN,OAA8BP,IAC/CsH,GAAAxO,KAAAoK,SAAAoD,UACAxN,KAAAwJ,OAAAoC,OAAA5L,KAAAwG,MAAAuB,OAAAb,KACWa,QAAA,EAAAE,MAAAjI,KAAAwG,MAAAyB,MAAAf,KAKX,IAFAa,GAAA/H,KAAAoK,SAAAmD,SAAAiB,GAEAtH,EAAA,EAAiBA,EAAAlH,KAAAwG,MAAA2B,MAAAV,OAA6BP,IAAA,CAI9C,IAHAqH,EAAAvO,KAAAwG,MAAA2B,MAAAjB,GAEAsH,EAAA,GACAC,EAAA,EAAmBA,EAAAF,EAAA9G,OAAgBgH,IACnCD,GAAAxO,KAAAoK,SAAAoD,UACAxN,KAAAwJ,OAAAoC,OAAA2C,EAAAE,KACa1G,QAAA,EAAAE,MAAAjI,KAAAwG,MAAAyB,MAAAwG,KAIbrB,GAAApN,KAAAoK,SAAAmD,SAAAiB,GAEA,OAAAxO,KAAAoK,SAAA3F,MAAAsD,EAAAqF,GAEA,uBAGA,IAFAA,EAAA,GAEA,mBAAApN,KAAAc,OAAA6G,MACAyF,GAAApN,KAAAmO,MAGA,OAAAnO,KAAAoK,SAAA/F,WAAA+I,GAEA,iBACAA,EAAA,GAIA,IAHA,IAAA/E,EAAArI,KAAAwG,MAAA6B,QACAC,EAAAtI,KAAAwG,MAAA8B,MAEA,aAAAtI,KAAAc,OAAA6G,MACAyF,GAAApN,KAAAmO,MAGA,OAAAnO,KAAAoK,SAAA9F,KAAA8I,EAAA/E,EAAAC,GAEA,sBACA8E,EAAA,GACA,IAAA1G,EAAA1G,KAAAwG,MAAAE,MAMA,IAJA1G,KAAAwG,MAAAuC,OACAqE,GAAApN,KAAAoK,SAAAkD,SAAAtN,KAAAwG,MAAAwC,UAGA,kBAAAhJ,KAAAc,OAAA6G,MACAyF,GAAA1G,GAAA,SAAA1G,KAAAwG,MAAAmB,KAEA3H,KAAAmO,MADAnO,KAAAsO,YAIA,OAAAtO,KAAAoK,SAAAiD,SAAAD,GAEA,WAEA,OAAApN,KAAAoK,SAAA7F,KAAAvE,KAAAwG,MAAA5B,MAEA,gBACA,OAAA5E,KAAAoK,SAAAzF,UAAA3E,KAAAwJ,OAAAoC,OAAA5L,KAAAwG,MAAA5B,OAEA,WACA,OAAA5E,KAAAoK,SAAAzF,UAAA3E,KAAAsO,eAqEA,IAAAjD,KACAyC,EAAA,gCAEA,SAAA7J,KAGA,SAAAmC,EAAAsI,GAKA,IAJA,IACAC,EACAC,EAFA1H,EAAA,EAIQA,EAAA2H,UAAApH,OAAsBP,IAE9B,IAAA0H,KADAD,EAAAE,UAAA3H,GAEAjC,OAAAsB,UAAAuI,eAAAC,KAAAJ,EAAAC,KACAF,EAAAE,GAAAD,EAAAC,IAKA,OAAAF,EAGA,SAAA1G,EAAAgH,EAAAC,GAGA,IAaA9G,EAbA6G,EAAAnJ,QAAA,eAAA0C,EAAA2G,EAAAC,GAGA,IAFA,IAAAxC,GAAA,EACAyC,EAAAF,IACAE,GAAA,UAAAD,EAAAC,IAAAzC,KACA,OAAAA,EAGA,IAGA,OAGAzE,MAAA,OACAhB,EAAA,EAEA,GAAAiB,EAAAV,OAAAwH,EACA9G,EAAAkH,OAAAJ,QAEA,KAAA9G,EAAAV,OAAAwH,GAAA9G,EAAAT,KAAA,IAGA,KAAQR,EAAAiB,EAAAV,OAAkBP,IAE1BiB,EAAAjB,GAAAiB,EAAAjB,GAAA+E,OAAApG,QAAA,aAEA,OAAAsC,EAMA,SAAAP,EAAAuH,EAAAG,EAAAC,GACA,OAAAJ,EAAA1H,OACA,SAOA,IAHA,IAAA+H,EAAA,EAGAA,EAAAL,EAAA1H,QAAA,CACA,IAAAgI,EAAAN,EAAAtG,OAAAsG,EAAA1H,OAAA+H,EAAA,GACA,GAAAC,IAAAH,GAAAC,EAEK,IAAAE,IAAAH,IAAAC,EAGL,MAFAC,SAFAA,IAQA,OAAAL,EAAAO,OAAA,EAAAP,EAAA1H,OAAA+H,GAOA,SAAArK,EAAAmB,EAAA2E,EAAA0E,GAEA,YAAArJ,GAAA,OAAAA,EACA,UAAAgD,MAAA,kDAEA,oBAAAhD,EACA,UAAAgD,MAAA,wCACArE,OAAAsB,UAAAmG,SAAAqC,KAAAzI,GAAA,qBAGA,GAAAqJ,GAAA,mBAAA1E,EAAA,CACA0E,IACAA,EAAA1E,EACAA,EAAA,MAKA,IACAlG,EACA6K,EAFAhD,GAFA3B,EAAA7E,KAAkBjB,EAAAC,SAAA6F,QAElB2B,UAGA1F,EAAA,EAEA,IACAnC,EAAAF,EAAAwB,IAAAC,EAAA2E,GACK,MAAA2C,GACL,OAAA+B,EAAA/B,GAGAgC,EAAA7K,EAAA0C,OAEA,IAAAoI,EAAA,SAAAC,GACA,GAAAA,EAEA,OADA7E,EAAA2B,YACA+C,EAAAG,GAGA,IAAAhE,EAEA,IACAA,EAAAtB,EAAAwD,MAAAjJ,EAAAkG,GACO,MAAA2C,GACPkC,EAAAlC,EAKA,OAFA3C,EAAA2B,YAEAkD,EACAH,EAAAG,GACAH,EAAA,KAAA7D,IAGA,IAAAc,KAAAnF,OAAA,EACA,OAAAoI,IAKA,UAFA5E,EAAA2B,WAEAgD,EAAA,OAAAC,IAEA,KAAU3I,EAAAnC,EAAA0C,OAAmBP,KAC7B,SAAAV,GACA,SAAAA,EAAAmB,OACAiI,GAAAC,IAEAjD,EAAApG,EAAA5B,KAAA4B,EAAAqB,KAAA,SAAAiI,EAAA/L,GACA,OAAA+L,EAAAD,EAAAC,GACA,MAAA/L,OAAAyC,EAAA5B,OACAgL,GAAAC,KAEArJ,EAAA5B,KAAAb,EACAyC,EAAAmG,SAAA,SACAiD,GAAAC,QAXA,CAaO9K,EAAAmC,SAKP,IAEA,OADA+D,MAAA7E,KAA2BjB,EAAAC,SAAA6F,IAC3BT,EAAAwD,MAAAnJ,EAAAwB,IAAAC,EAAA2E,MACG,MAAA2C,GAEH,GADAA,EAAAmC,SAAA,+DACA9E,GAAA9F,EAAAC,UAAA4K,OACA,uCACAvG,EAAAmE,EAAAmC,QAAA,OACA,SAEA,MAAAnC,GA1KA3J,EAAAsD,KAAAtD,EAkLAkB,EAAAL,QACAK,EAAA8K,WAAA,SAAAhF,GAEA,OADA7E,EAAAjB,EAAAC,SAAA6F,GACA9F,GAGAA,EAAA+K,YAAA,WACA,OACArC,QAAA,KACAvD,QAAA,EACA9E,KAAA,EACAyH,WAAA,EACAC,aAAA,GACAN,UAAA,KACAC,WAAA,YACAd,QAAA,EACAxG,UAAA,EACA6E,SAAA,IAAAC,EACApB,UAAA,EACAE,UAAA,KACA6G,QAAA,EACAtH,YAAA,EACA2D,aAAA,EACA5G,QAAA,EACA0H,OAAA,IAIAhI,EAAAC,SAAAD,EAAA+K,cAMA/K,EAAAqF,SACArF,EAAAgL,OAAA3F,EAAAwD,MAEA7I,EAAAkF,WACAlF,EAAAoF,eAEApF,EAAAN,QACAM,EAAAiL,MAAAvL,EAAAwB,IAEAlB,EAAAgF,cACAhF,EAAAkL,YAAAlG,EAAAyB,OAEAzG,EAAA6I,MAAA7I,EAGAmL,EAAAC,QAAApL,EAxhDC,CA8hDAnF,MAAA,oBAAAwQ","file":"static/js/2.252444fea6b484acc95c.js","sourcesContent":["<template>\r\n  <div class=\"detail-container\">\r\n    &nbsp;\r\n    <h1 v-if=\"!isLoading\">{{title}}</h1>\r\n    <div style=\"font-size: 14px; color: #969696; padding-bottom: 10px;border-bottom: 1px solid #f0f0f0\">\r\n      <div class=\"tag\">标签：{{tag}}</div>\r\n      <div class=\"date\">时间：{{date}}</div>\r\n    </div>\r\n    <div v-if=\"!isLoading\" v-html=\"mark\" v-highlight article></div>\r\n    <div class=\"comment\">\r\n      <!-- <div class=\"title\">12条评论:</div>\r\n              <ul>\r\n                  <li v-for=\"n in 5\" :key=\"n\">\r\n                      <div><img src=\"http://www.yangqq.com/skin/850/images/text01.jpg\" alt=\"\"><b>alloc</b> 1楼-4年前 </div>\r\n                      <div>marked 在浏览器里应该也能跑</div>\r\n                  </li>\r\n              </ul> -->\r\n    </div>\r\n    <div class=\"loading\" v-if=\"isLoading\">\r\n      <Loading/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Loading from \"@/components/Loading\";\r\n  import Marked from \"marked\"; \r\n  export default {\r\n    components: {\r\n      Loading,\r\n    },\r\n    data() {\r\n      return {\r\n        article: \"\",\r\n        title: \"\",\r\n        date: \"\",\r\n        tag: \"\",\r\n      };\r\n    },\r\n    computed: {\r\n      mark() {\r\n        return Marked(this.article);\r\n      },\r\n      isLoading() {\r\n        return this.$store.state.isLoading;\r\n      }\r\n    },\r\n    async created() {\r\n      try {\r\n        this.$store.commit(\"switchLoading\");\r\n        const res = await this.$request({\r\n          path: `article?id=${this.$route.params.id}`,\r\n          data: {},\r\n          method: \"GET\"\r\n        });\r\n        this.article = res.content;\r\n        this.title = res.title;\r\n        this.date = moment(Number(res.date)).format(\"YYYY-MM-DD\");\r\n        this.tag = res.tag;\r\n        this.$store.commit(\"switchLoading\");\r\n      } catch (err) {\r\n  \r\n      }\r\n    },\r\n    mounted() {},\r\n    methods: {},\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  h1 {\r\n    // border-bottom: 2px solid #ddd;\r\n    // padding-bottom: 10px;\r\n    word-break: break-all;\r\n  }\r\n  \r\n  .loading {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .detail-container {\r\n    background: #fff;\r\n    // height: 1500px;\r\n    padding: 0px 20px;\r\n    min-height: 800px;\r\n    div[article] {\r\n      word-break: break-all;\r\n    }\r\n  }\r\n  \r\n  .comment {\r\n    // border-top: 2px solid #976;\r\n    padding: 10px 0px;\r\n    .title {\r\n      background: #f6f6f6;\r\n      height: 40px;\r\n      line-height: 40px;\r\n      margin-bottom: 20px;\r\n    }\r\n    ul {\r\n      li {\r\n        list-style: none;\r\n        div:first-child {\r\n          padding-top: 10px;\r\n          height: 40px;\r\n          img {\r\n            height: 30px;\r\n            width: 30px;\r\n            vertical-align: middle;\r\n            margin-right: 20px;\r\n          }\r\n        }\r\n        div:last-child {\r\n          padding: 10px 0px;\r\n          padding-left: 50px;\r\n          display: flex;\r\n          align-items: center;\r\n        }\r\n      }\r\n      li:not(:last-child) {\r\n        border-bottom: 2px solid #f6f6f6;\r\n      }\r\n      li:hover {\r\n        background: #f6f6f6;\r\n      }\r\n    }\r\n  }\r\n  \r\n  @media screen and (max-width: 1060px) {\r\n    h1 {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/Client/pages/Detail.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"detail-container\"},[_vm._v(\"\\n   \\n  \"),(!_vm.isLoading)?_c('h1',[_vm._v(_vm._s(_vm.title))]):_vm._e(),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"14px\",\"color\":\"#969696\",\"padding-bottom\":\"10px\",\"border-bottom\":\"1px solid #f0f0f0\"}},[_c('div',{staticClass:\"tag\"},[_vm._v(\"标签：\"+_vm._s(_vm.tag))]),_vm._v(\" \"),_c('div',{staticClass:\"date\"},[_vm._v(\"时间：\"+_vm._s(_vm.date))])]),_vm._v(\" \"),(!_vm.isLoading)?_c('div',{directives:[{name:\"highlight\",rawName:\"v-highlight\"}],attrs:{\"article\":\"\"},domProps:{\"innerHTML\":_vm._s(_vm.mark)}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"comment\"}),_vm._v(\" \"),(_vm.isLoading)?_c('div',{staticClass:\"loading\"},[_c('Loading')],1):_vm._e()])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-77f6154a\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Client/pages/Detail.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-77f6154a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Detail.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Detail.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Detail.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-77f6154a\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Detail.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-77f6154a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Client/pages/Detail.vue\n// module id = null\n// module chunks = ","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? rtrim(cap, '\\n')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*\"<\\[])\\*(?!\\*)|^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s\"<\\[][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('email', inline._email)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|')\n    .getRegex()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      do {\n        prevCapZero = cap[0];\n        cap[0] = this.rules._backpedal.exec(cap[0])[0];\n      } while (prevCapZero !== cap[0]);\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n}\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n}\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return text;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return text;\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n}\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n}\n\nTextRenderer.prototype.br = function() {\n  return '';\n}\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n}\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/marked/lib/marked.js\n// module id = EFqf\n// module chunks = 2"],"sourceRoot":""}